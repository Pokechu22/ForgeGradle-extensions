buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			// Needed for FG
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			// Needed for gradle API
			name = "gradle"
			url = "https://plugins.gradle.org/m2/"
		}
	}
}

subprojects {
	if (project.name.contains("BEGradle")) {
		task regenEclipse {
			// Delete the eclipse classpath and project and then recreate it, without doing any of the slower bits.
			dependsOn 'cleanEclipseProject'
			dependsOn 'cleanEclipseClasspath'
			dependsOn 'eclipseProject'
			dependsOn 'eclipseClasspath'
		}

		// Compiling
		apply plugin: 'java'
		// idea IDE
		apply plugin: 'idea'
		// eclipse IDE
		apply plugin: 'eclipse'
		// Needed to use content from maven repos
		apply plugin: 'maven'

		group = 'pokechu22.test.begradle'
		version = '0.2.6'
		archivesBaseName = 'begradle'
		targetCompatibility = '1.8'
		sourceCompatibility = '1.8'

		repositories {
			// Main maven repos
			jcenter()
			mavenCentral()
			// Local repository (eg, own build of ForgeGradle)
			// Below those repos so that source jars work (but above FG)
			mavenLocal()
			// Needed for ForgeGradle (among other things) 
			maven {
				name = "forge"
				url = "https://files.minecraftforge.net/maven"
			}
		}

		sourceSets {
			main {
				java {
					srcDir "src/main/java"
					srcDir project(':share').file("src/main/java")
				}
				resources {
					srcDir "src/main/resources"
					srcDir project(':share').file("src/main/resources")
				}
			}
			test {
				java {
					srcDir project(':share').file("src/test/java")
				}
			}
		}

		compileJava {
			options.deprecation = true
		}

		jar {
			manifest {
				attributes 'version': project.version
				attributes 'javaCompliance': project.targetCompatibility
				attributes 'group': project.group
				attributes 'Implementation-Version': project.version + getGitHash()
			}
		}

		javadoc {
			classpath += configurations.compileOnly

			// Linked javadoc urls
			options.addStringOption 'link', 'https://gradle.org/docs/current/javadoc/'
		}

		task javadocJar(type: Jar, dependsOn: javadoc) {
			from javadoc
			classifier = "javadoc"
		}

		artifacts {
			archives jar
			archives javadocJar
		}
	}
}

def getGitHash() {
	try {
		def process = 'git rev-parse --short HEAD'.execute()
		process.waitFor()
		return '-' + (process.exitValue() > 0 ? 'unknown' : process.text.trim())
	} catch (Exception ex) {
		logger.warn "Failed to run git to get current version: " + ex.toString()
		logger.warn "The exact revision will not be listed, but the program will still work normally."
		return '-unknown'
	}
}
